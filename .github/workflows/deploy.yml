name: Deploy to AWS

on:
  push:
    branches: [ production ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_tests:
        description: 'Skip test execution (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  DEPLOYMENT_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  pre-deployment-validation:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate deployment environment
      run: |
        echo "🔍 Validating deployment to: ${{ env.DEPLOYMENT_ENVIRONMENT }}"
        
        if [ "${{ env.DEPLOYMENT_ENVIRONMENT }}" = "production" ]; then
          echo "⚠️ Production deployment detected - enhanced validation required"
          
          # Check if this is a hotfix or emergency deployment
          if [ "${{ github.event.inputs.skip_tests }}" = "true" ]; then
            echo "🚨 Emergency deployment mode - some checks will be skipped"
          fi
        fi
        
        echo "✅ Environment validation completed"
        
    - name: Check branch protection
      run: |
        echo "🔒 Validating branch protection rules..."
        
        if [ "${{ github.ref_name }}" != "production" ] && [ "${{ env.DEPLOYMENT_ENVIRONMENT }}" = "production" ]; then
          echo "❌ Production deployments must be from 'production' branch"
          exit 1
        fi
        
        echo "✅ Branch validation passed"

  enhanced-quality-gate:
    name: Enhanced Quality Gate
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-interaction --optimize-autoloader
        npm ci
        
    - name: Create test environment
      run: |
        cp .env.example .env
        php artisan key:generate
        touch database/testing.sqlite
        
    - name: Enhanced security scanning
      run: |
        echo "🔒 Running enhanced security scans for deployment..."
        
        # PHP security audit with strict mode
        composer audit --format=json > deployment-php-audit.json || true
        if [ -f "deployment-php-audit.json" ]; then
          VULNS=$(cat deployment-php-audit.json | jq '.advisories | length' 2>/dev/null || echo "0")
          if [ "$VULNS" -gt 0 ]; then
            echo "❌ Security vulnerabilities found - deployment blocked"
            cat deployment-php-audit.json | jq '.advisories'
            exit 1
          fi
        fi
        
        # Node.js security audit with strict mode
        npm audit --audit-level=moderate --json > deployment-npm-audit.json || true
        if [ -f "deployment-npm-audit.json" ]; then
          HIGH_VULNS=$(cat deployment-npm-audit.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' 2>/dev/null || echo "0")
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "❌ High/Critical Node.js vulnerabilities found - deployment blocked"
            npm audit --audit-level=moderate
            exit 1
          fi
        fi
        
        echo "✅ Security scanning passed"
        
    - name: Enhanced quality checks
      run: |
        echo "🎨 Running enhanced code quality checks..."
        
        # PHP linting with strict mode
        vendor/bin/pint --test
        echo "✅ PHP formatting validated"
        
        # JavaScript linting with strict mode
        npm run lint:js
        echo "✅ JavaScript linting passed"
        
        # Blade template linting
        npm run lint:blade
        echo "✅ Blade template validation passed"
        
        # Production build verification
        npm run build
        echo "✅ Production build completed"
        
        # Enhanced build verification
        if [ ! -d "public/build" ] || [ ! -f "public/build/manifest.json" ]; then
          echo "❌ Build verification failed"
          exit 1
        fi
        
        # Verify no debug code in production build
        if grep -r "console\.\|debugger" public/build/*.js 2>/dev/null; then
          echo "❌ Debug code found in production build"
          exit 1
        fi
        
        echo "✅ All enhanced quality checks passed"
        
    - name: Comprehensive test suite
      run: |
        echo "🧪 Running comprehensive test suite..."
        
        # PHP tests with coverage requirement
        php artisan test --coverage --min=80
        echo "✅ PHP tests passed with coverage"
        
        # JavaScript tests
        npm run test
        echo "✅ JavaScript tests passed"
        
        # Integration tests (if available)
        if [ -f "tests/Feature/IntegrationTest.php" ]; then
          php artisan test --testsuite=Feature --filter=Integration
          echo "✅ Integration tests passed"
        fi
        
        echo "✅ Comprehensive testing completed"
        
  manual-approval:
    name: Manual Approval for Production
    runs-on: ubuntu-latest
    needs: enhanced-quality-gate
    if: github.event.inputs.environment == 'production' || (github.event.inputs.environment == null && github.ref == 'refs/heads/production')
    environment: 
      name: production-approval
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Notify approval required
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'manual-approval-required'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        mention-users: 'deployment-approvers'
      continue-on-error: true
      
    - name: Request manual approval
      run: |
        echo "🔐 Manual approval required for production deployment"
        echo "Environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo ""
        echo "Please review the deployment details and approve to continue."

  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'Production' }}
    runs-on: ubuntu-latest
    needs: [enhanced-quality-gate, manual-approval]
    if: always() && (needs.enhanced-quality-gate.result == 'success' && (needs.manual-approval.result == 'success' || needs.manual-approval.result == 'skipped'))
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start deployment logging
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'deployment-start'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
    
    - name: Notify deployment start
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'deployment-start'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true
      
    - name: Optimize resources before deployment
      uses: ./.github/actions/resource-optimizer
      with:
        operation: 'full'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        enable-aws-recommendations: 'true'
        optimize-caches: 'true'
        monitor-database: 'true'
        
    - name: Start performance monitoring
      uses: ./.github/actions/performance-monitor
      with:
        operation: 'start'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        enable-alerts: 'true'
        
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ env.DEPLOYMENT_ENVIRONMENT == 'production' && secrets.AWS_HOST || secrets.AWS_STAGING_HOST }}
        username: ${{ env.DEPLOYMENT_ENVIRONMENT == 'production' && secrets.AWS_USERNAME || secrets.AWS_STAGING_USERNAME }}
        key: ${{ env.DEPLOYMENT_ENVIRONMENT == 'production' && secrets.AWS_PRIVATE_KEY || secrets.AWS_STAGING_PRIVATE_KEY }}
        script: |
          set -e
          
          echo "🚀 Starting ${{ env.DEPLOYMENT_ENVIRONMENT }} deployment..."
          
          # Set deployment directory based on environment
          if [ "${{ env.DEPLOYMENT_ENVIRONMENT }}" = "production" ]; then
            DEPLOY_DIR="/home/ec2-user/shicecal"
            BRANCH="production"
          else
            DEPLOY_DIR="/home/ec2-user/shicecal-staging"
            BRANCH="main"
          fi
          
          cd "$DEPLOY_DIR"
          
          # Create deployment backup
          BACKUP_DIR="/home/ec2-user/backups/$(date +%Y%m%d_%H%M%S)_${{ env.DEPLOYMENT_ENVIRONMENT }}"
          mkdir -p "$BACKUP_DIR"
          
          # Backup current state
          if [ -d "public/build" ]; then
            cp -r public/build "$BACKUP_DIR/"
            echo "✅ Backed up build assets"
          fi
          
          if [ -f ".env" ]; then
            cp .env "$BACKUP_DIR/"
            echo "✅ Backed up environment configuration"
          fi
          
          # Backup database (production only)
          if [ "${{ env.DEPLOYMENT_ENVIRONMENT }}" = "production" ]; then
            php artisan backup:run --only-db 2>/dev/null || echo "⚠️ Database backup failed or not configured"
          fi
          
          # Pull latest changes
          git fetch origin
          git reset --hard "origin/$BRANCH"
          echo "✅ Updated to latest $BRANCH branch"
          
          # Install dependencies
          composer install --no-dev --optimize-autoloader --no-interaction
          npm ci --production=false
          echo "✅ Dependencies installed"
          
          # Clear existing build artifacts
          rm -rf public/build
          
          # Build assets with Vite
          npm run build
          echo "✅ Assets built"
          
          # Enhanced build verification
          if [ ! -d "public/build" ]; then
            echo "❌ Asset build failed - directory not created"
            exit 1
          fi
          
          if [ ! -f "public/build/manifest.json" ]; then
            echo "❌ Vite manifest file not generated"
            exit 1
          fi
          
          # Verify no debug code in production build
          if grep -r "console\.\|debugger" public/build/*.js 2>/dev/null; then
            echo "❌ Debug code found in production build"
            exit 1
          fi
          
          echo "✅ Build verification passed - Files: $(find public/build -type f | wc -l)"
          
          # Database operations
          php artisan migrate --force
          echo "✅ Database migrations completed"
          
          # Seed data (environment-specific)
          if [ "${{ env.DEPLOYMENT_ENVIRONMENT }}" = "production" ]; then
            php artisan db:seed --class=AdminUserSeeder --force
          else
            php artisan db:seed --class=AdminUserSeeder --force
            php artisan db:seed --class=FacilitySeeder --force
            php artisan db:seed --class=LandInfoSeeder --force
          fi
          echo "✅ Database seeding completed"
          
          # Clear and rebuild caches
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          php artisan cache:clear
          
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          echo "✅ Caches optimized"
          
          # Final verification
          if [ ! -f "public/build/manifest.json" ]; then
            echo "❌ Vite manifest file missing after cache rebuild"
            exit 1
          fi
          
          # Validate manifest JSON
          if ! php -r "json_decode(file_get_contents('public/build/manifest.json')); if (json_last_error() !== JSON_ERROR_NONE) exit(1);"; then
            echo "❌ Vite manifest file is invalid"
            exit 1
          fi
          
          echo "✅ Final deployment verification completed"
          
          # Restart services
          sudo systemctl restart nginx
          sudo systemctl restart php-fpm
          echo "✅ Services restarted"
          
          echo "🎉 ${{ env.DEPLOYMENT_ENVIRONMENT }} deployment completed successfully"

  post-deployment-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Wait for services to stabilize
      run: sleep 45
      
    - name: Health check verification
      run: |
        echo "🏥 Running post-deployment health checks..."
        
        # Set health check URL based on environment
        if [ "${{ env.DEPLOYMENT_ENVIRONMENT }}" = "production" ]; then
          HEALTH_URL="${{ secrets.AWS_PROD_URL }}/health"
        else
          HEALTH_URL="${{ secrets.AWS_STAGING_URL }}/health"
        fi
        
        # HTTP health check with retries
        for i in {1..5}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || echo "000")
          if [ "$response" = "200" ]; then
            echo "✅ Health check passed (attempt $i)"
            break
          else
            echo "⚠️ Health check failed (attempt $i) - HTTP $response"
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          fi
        done
        
    - name: Application verification
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ env.DEPLOYMENT_ENVIRONMENT == 'production' && secrets.AWS_HOST || secrets.AWS_STAGING_HOST }}
        username: ${{ env.DEPLOYMENT_ENVIRONMENT == 'production' && secrets.AWS_USERNAME || secrets.AWS_STAGING_USERNAME }}
        key: ${{ env.DEPLOYMENT_ENVIRONMENT == 'production' && secrets.AWS_PRIVATE_KEY || secrets.AWS_STAGING_PRIVATE_KEY }}
        script: |
          # Set deployment directory
          if [ "${{ env.DEPLOYMENT_ENVIRONMENT }}" = "production" ]; then
            DEPLOY_DIR="/home/ec2-user/shicecal"
          else
            DEPLOY_DIR="/home/ec2-user/shicecal-staging"
          fi
          
          cd "$DEPLOY_DIR"
          
          echo "🔍 Running application verification..."
          
          # Database connection check
          if ! php artisan tinker --execute="DB::connection()->getPdo(); echo 'DB OK';" 2>/dev/null | grep -q "DB OK"; then
            echo "❌ Database connection failed"
            exit 1
          fi
          echo "✅ Database connection verified"
          
          # Laravel application status
          if ! php artisan about --only=environment 2>/dev/null | grep -q "Environment"; then
            echo "❌ Laravel application check failed"
            exit 1
          fi
          echo "✅ Laravel application status verified"
          
          # Asset integrity check
          if [ ! -f "public/build/manifest.json" ]; then
            echo "❌ Asset manifest missing"
            exit 1
          fi
          
          if ! php -r "json_decode(file_get_contents('public/build/manifest.json')); if (json_last_error() !== JSON_ERROR_NONE) exit(1);"; then
            echo "❌ Asset manifest invalid"
            exit 1
          fi
          echo "✅ Asset integrity verified"
          
          echo "✅ All application verification checks passed"
          
    - name: Complete performance monitoring
      if: always()
      id: performance-monitoring
      uses: ./.github/actions/performance-monitor
      with:
        operation: 'full'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        enable-alerts: 'true'
        slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Upload performance artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-report-${{ env.DEPLOYMENT_ENVIRONMENT }}-${{ github.run_number }}
        path: |
          .github/artifacts/performance/
          .github/artifacts/optimization/
          .github/logs/deployment-performance-report.md
          .github/logs/performance-insights.md
          .github/logs/resource-optimization-report.md
          .github/logs/aws-optimization-recommendations.md
        retention-days: 30
        
    - name: Log deployment success
      if: success()
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'deployment-success'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        
    - name: Notify deployment success
      if: success()
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'deployment-success'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        duration: ${{ env.DEPLOYMENT_DURATION }}
        tests-passed: 'All quality gates passed'
      continue-on-error: true
      
    - name: Send production success email
      if: success() && env.DEPLOYMENT_ENVIRONMENT == 'production'
      uses: ./.github/actions/email-notify
      with:
        notification-type: 'production-success'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        smtp-username: ${{ secrets.SMTP_USERNAME }}
        smtp-password: ${{ secrets.SMTP_PASSWORD }}
        to-email: ${{ secrets.DEVOPS_EMAIL }}
        duration: ${{ env.DEPLOYMENT_DURATION }}
        tests-passed: 'All quality gates and health checks passed'
      continue-on-error: true
      
    - name: Log deployment failure
      if: failure()
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'deployment-failure'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        error-message: 'Deployment failed during post-deployment verification'
        failed-stage: 'Post-Deployment Verification'
        
    - name: Notify deployment failure
      if: failure()
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'deployment-failure'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        error-message: 'Deployment failed during post-deployment verification'
        failed-stage: 'Post-Deployment Verification'
      continue-on-error: true
      
    - name: Send critical email notification on failure
      if: failure() && (env.DEPLOYMENT_ENVIRONMENT == 'production' || env.DEPLOYMENT_ENVIRONMENT == 'staging')
      uses: ./.github/actions/email-notify
      with:
        notification-type: 'deployment-failure'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        smtp-username: ${{ secrets.SMTP_USERNAME }}
        smtp-password: ${{ secrets.SMTP_PASSWORD }}
        to-email: ${{ secrets.DEVOPS_EMAIL }}
        escalation-email: ${{ secrets.ESCALATION_EMAIL }}
        error-message: 'Deployment failed during post-deployment verification'
        failed-stage: 'Post-Deployment Verification'
      continue-on-error: true      
  
  - name: Aggregate and upload deployment logs
      if: always()
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'aggregate'
        environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        upload-logs: 'true'
        log-retention-days: '90'