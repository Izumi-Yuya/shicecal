name: Continuous Integration

on:
  push:
    branches: [ main, develop, production ]
  pull_request:
    branches: [ main, develop, production ]
  workflow_dispatch:

env:
  MINIMUM_PHP_COVERAGE: 80
  MINIMUM_JS_COVERAGE: 75

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize security scan logging
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'info'
        component: 'SECURITY'
        message: 'Starting security scanning phase'
        environment: 'ci-pipeline'
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-interaction --optimize-autoloader
      
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: PHP Security Audit
      run: |
        echo "üîç Running PHP security audit..."
        composer audit --format=json > php-audit.json || true
        
        # Check for high/critical vulnerabilities
        if [ -f "php-audit.json" ]; then
          HIGH_VULNS=$(cat php-audit.json | jq '.advisories | length' 2>/dev/null || echo "0")
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ùå Found $HIGH_VULNS PHP security vulnerabilities"
            cat php-audit.json | jq '.advisories'
            
            # Set environment variables for notification
            echo "PHP_VULNS=$HIGH_VULNS" >> $GITHUB_ENV
            echo "PHP_VULN_DETAILS=$(cat php-audit.json | jq -r '.advisories | keys | join(", ")')" >> $GITHUB_ENV
            exit 1
          fi
        fi
        echo "‚úÖ PHP security audit passed"
        
    - name: Log PHP security scan results
      if: always()
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'security-scan'
        scan-type: 'php'
        vulnerabilities-found: ${{ env.PHP_VULNS || '0' }}
        severity: 'high'
        environment: 'ci-pipeline'
        
    - name: Node.js Security Audit
      run: |
        echo "üîç Running Node.js security audit..."
        npm audit --audit-level=high --json > npm-audit.json || true
        
        # Check for high/critical vulnerabilities
        if [ -f "npm-audit.json" ]; then
          HIGH_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' 2>/dev/null || echo "0")
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ùå Found $HIGH_VULNS high/critical Node.js vulnerabilities"
            npm audit --audit-level=high
            
            # Set environment variables for notification
            echo "NPM_VULNS=$HIGH_VULNS" >> $GITHUB_ENV
            echo "NPM_VULN_DETAILS=High/Critical Node.js vulnerabilities found" >> $GITHUB_ENV
            exit 1
          fi
        fi
        echo "‚úÖ Node.js security audit passed"
        
    - name: Log Node.js security scan results
      if: always()
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'security-scan'
        scan-type: 'npm'
        vulnerabilities-found: ${{ env.NPM_VULNS || '0' }}
        severity: 'high'
        environment: 'ci-pipeline'
        
    - name: Notify security vulnerabilities
      if: failure() && (env.PHP_VULNS != '' || env.NPM_VULNS != '')
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'security-alert'
        environment: 'security-scan'
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        vulnerability-count: ${{ env.PHP_VULNS || env.NPM_VULNS }}
        severity: 'High/Critical'
        error-message: ${{ env.PHP_VULN_DETAILS || env.NPM_VULN_DETAILS }}
      continue-on-error: true
      
    - name: Send security alert email
      if: failure() && (env.PHP_VULNS != '' || env.NPM_VULNS != '')
      uses: ./.github/actions/email-notify
      with:
        notification-type: 'security-alert'
        environment: 'security-scan'
        smtp-username: ${{ secrets.SMTP_USERNAME }}
        smtp-password: ${{ secrets.SMTP_PASSWORD }}
        to-email: ${{ secrets.DEVOPS_EMAIL }}
        security-email: ${{ secrets.SECURITY_EMAIL }}
        vulnerability-count: ${{ env.PHP_VULNS || env.NPM_VULNS }}
        severity: 'High/Critical'
        error-message: ${{ env.PHP_VULN_DETAILS || env.NPM_VULN_DETAILS }}
      continue-on-error: true
        
    - name: Static Code Analysis - PHP
      run: |
        echo "üîç Running PHP static analysis..."
        
        # Check for common security patterns
        if grep -r "eval\|exec\|system\|shell_exec\|passthru" app/ --include="*.php" 2>/dev/null; then
          echo "‚ùå Potentially dangerous PHP functions found"
          exit 1
        fi
        
        # Check for SQL injection patterns
        if grep -r "DB::raw.*\$\|->whereRaw.*\$" app/ --include="*.php" 2>/dev/null; then
          echo "‚ö†Ô∏è Potential SQL injection patterns found - review manually"
        fi
        
        echo "‚úÖ PHP static analysis completed"
        
    - name: Static Code Analysis - JavaScript
      run: |
        echo "üîç Running JavaScript static analysis..."
        
        # Check for dangerous JavaScript patterns
        if grep -r "eval\|innerHTML\|document.write" resources/js/ --include="*.js" 2>/dev/null; then
          echo "‚ùå Potentially dangerous JavaScript patterns found"
          exit 1
        fi
        
        # Check for console statements in production code
        if grep -r "console\." resources/js/ --include="*.js" --exclude="*.test.js" 2>/dev/null; then
          echo "‚ö†Ô∏è Console statements found - should be removed for production"
        fi
        
        echo "‚úÖ JavaScript static analysis completed"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize code quality logging
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'info'
        component: 'CODE_QUALITY'
        message: 'Starting code quality checks'
        environment: 'ci-pipeline'
      
    - name: Setup PHP with optimized extensions
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug
        ini-values: memory_limit=2G, max_execution_time=300
        tools: composer:v2
        
    - name: Setup Node.js with enhanced caching
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.composer/cache
          vendor
        key: composer-${{ runner.os }}-${{ hashFiles('composer.lock') }}
        restore-keys: |
          composer-${{ runner.os }}-
          
    - name: Cache Vite build cache
      uses: actions/cache@v3
      with:
        path: |
          node_modules/.vite
          .vite
        key: vite-cache-${{ runner.os }}-${{ hashFiles('vite.config.js', 'package-lock.json') }}
        restore-keys: |
          vite-cache-${{ runner.os }}-
          
    - name: Install PHP dependencies with optimization
      run: |
        # Use parallel downloads and optimized autoloader
        composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader --classmap-authoritative --no-dev
        composer dump-autoload --optimize --classmap-authoritative
      
    - name: Install Node.js dependencies with optimization
      run: |
        # Use npm ci with cache verification and parallel processing
        npm ci --prefer-offline --no-audit --progress=false
      
    - name: Create environment file
      run: |
        cp .env.example .env
        php artisan key:generate
        
    - name: Setup SQLite database
      run: |
        touch database/database.sqlite
        php artisan migrate --force
        
    # PHP Code Quality
    - name: Run PHP Linting (Laravel Pint)
      run: |
        echo "üé® Running PHP code formatting check..."
        vendor/bin/pint --test
        echo "‚úÖ PHP code formatting passed"
      
    - name: Run PHP Static Analysis (if PHPStan is available)
      run: |
        if [ -f "vendor/bin/phpstan" ]; then
          echo "üîç Running PHPStan static analysis..."
          vendor/bin/phpstan analyse --memory-limit=2G --error-format=github
          echo "‚úÖ PHPStan analysis passed"
        else
          echo "‚ÑπÔ∏è PHPStan not installed, skipping static analysis"
        fi
      continue-on-error: false
      
    # JavaScript Code Quality
    - name: Run JavaScript Linting (ESLint)
      run: |
        echo "üé® Running JavaScript linting..."
        npm run lint:js
        echo "‚úÖ JavaScript linting passed"
      
    - name: Run Blade Template Linting
      run: |
        echo "üé® Running Blade template linting..."
        npm run lint:blade
        echo "‚úÖ Blade template linting passed"
      
    - name: Run HTML Linting
      run: |
        echo "üé® Running HTML linting..."
        npm run lint:html || echo "‚ö†Ô∏è HTML linting completed with warnings (may have false positives with Blade syntax)"
      continue-on-error: true
      
    # Build Verification
    - name: Start build logging
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'build-start'
        build-type: 'frontend'
        environment: 'ci-pipeline'
        
    - name: Build Frontend Assets
      run: npm run build
      
    - name: Verify Build Output
      run: |
        if [ ! -d "public/build" ]; then
          echo "‚ùå Build directory not created"
          exit 1
        fi
        
        if [ ! -f "public/build/manifest.json" ]; then
          echo "‚ùå Vite manifest file not generated"
          exit 1
        fi
        
        # Check if manifest is valid JSON
        if ! node -e "JSON.parse(require('fs').readFileSync('public/build/manifest.json', 'utf8'))"; then
          echo "‚ùå Vite manifest file is invalid JSON"
          exit 1
        fi
        
        echo "‚úÖ Build verification passed"
        echo "üìä Build files: $(find public/build -type f | wc -l)"
        
        # Calculate build size
        BUILD_SIZE=$(du -sb public/build | cut -f1)
        echo "BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV
        
    - name: Log build completion
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'build-complete'
        build-type: 'frontend'
        build-size: ${{ env.BUILD_SIZE }}
        environment: 'ci-pipeline'
        
    # Testing with Enhanced Coverage
    - name: Start PHP test logging
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'test-start'
        test-type: 'php'
        environment: 'ci-pipeline'
        
    - name: Run PHP Tests with Coverage
      run: |
        echo "üß™ Running PHP tests with coverage analysis..."
        
        # Run tests and capture results
        php artisan test --coverage --min=${{ env.MINIMUM_PHP_COVERAGE }} --coverage-clover=coverage-php.xml > test-results.txt 2>&1 || TEST_EXIT_CODE=$?
        
        # Parse test results
        if [ -f "test-results.txt" ]; then
          TESTS_PASSED=$(grep -o "Tests:.*passed" test-results.txt | grep -o "[0-9]\+" | head -1 || echo "0")
          TESTS_FAILED=$(grep -o "Tests:.*failed" test-results.txt | grep -o "[0-9]\+" | tail -1 || echo "0")
          echo "PHP_TESTS_PASSED=$TESTS_PASSED" >> $GITHUB_ENV
          echo "PHP_TESTS_FAILED=$TESTS_FAILED" >> $GITHUB_ENV
        fi
        
        # Exit with original code if tests failed
        if [ "${TEST_EXIT_CODE:-0}" -ne 0 ]; then
          cat test-results.txt
          exit $TEST_EXIT_CODE
        fi
        
        echo "‚úÖ PHP tests passed with minimum ${{ env.MINIMUM_PHP_COVERAGE }}% coverage"
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/testing.sqlite
        
    - name: Log PHP test results
      if: always()
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'test-results'
        test-type: 'php'
        tests-passed: ${{ env.PHP_TESTS_PASSED || '0' }}
        tests-failed: ${{ env.PHP_TESTS_FAILED || '0' }}
        environment: 'ci-pipeline'
        
    - name: Start JavaScript test logging
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'test-start'
        test-type: 'javascript'
        environment: 'ci-pipeline'
        
    - name: Run JavaScript Tests with Coverage
      run: |
        echo "üß™ Running JavaScript tests with coverage analysis..."
        
        # Run tests and capture results
        npm run test -- --coverage --reporter=verbose > js-test-results.txt 2>&1 || JS_TEST_EXIT_CODE=$?
        
        # Parse test results (adjust based on your test runner output format)
        if [ -f "js-test-results.txt" ]; then
          JS_TESTS_PASSED=$(grep -o "passed.*[0-9]\+" js-test-results.txt | grep -o "[0-9]\+" | head -1 || echo "0")
          JS_TESTS_FAILED=$(grep -o "failed.*[0-9]\+" js-test-results.txt | grep -o "[0-9]\+" | head -1 || echo "0")
          echo "JS_TESTS_PASSED=$JS_TESTS_PASSED" >> $GITHUB_ENV
          echo "JS_TESTS_FAILED=$JS_TESTS_FAILED" >> $GITHUB_ENV
        fi
        
        # Exit with original code if tests failed
        if [ "${JS_TEST_EXIT_CODE:-0}" -ne 0 ]; then
          cat js-test-results.txt
          exit $JS_TEST_EXIT_CODE
        fi
        
        echo "‚úÖ JavaScript tests completed"
        
    - name: Log JavaScript test results
      if: always()
      uses: ./.github/actions/deployment-logger
      with:
        operation: 'test-results'
        test-type: 'javascript'
        tests-passed: ${{ env.JS_TESTS_PASSED || '0' }}
        tests-failed: ${{ env.JS_TESTS_FAILED || '0' }}
        environment: 'ci-pipeline'
        
    - name: Generate Test Reports
      run: |
        echo "üìä Generating test reports..."
        
        # Create test reports directory
        mkdir -p test-reports
        
        # PHP test results
        if [ -f "coverage-php.xml" ]; then
          echo "üìã PHP Coverage Report Generated"
          cp coverage-php.xml test-reports/
        fi
        
        # JavaScript test results
        if [ -d "coverage" ]; then
          echo "üìã JavaScript Coverage Report Generated"
          cp -r coverage test-reports/js-coverage
        fi
        
        echo "‚úÖ Test reports generated"
        
    - name: Upload Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ github.run_number }}
        path: test-reports/
        retention-days: 30
      
    # Enhanced Security Validation
    - name: Validate Security Scan Results
      run: |
        echo "üîí Validating security scan results..."
        
        # Ensure no critical security issues were found
        if [ -f "php-audit.json" ]; then
          echo "‚úÖ PHP security validation passed"
        fi
        
        if [ -f "npm-audit.json" ]; then
          echo "‚úÖ Node.js security validation passed"
        fi
        
        echo "‚úÖ Security validation completed"
      
    # Enhanced Performance Checks
    - name: Bundle Size Analysis
      run: |
        echo "üì¶ Analyzing bundle size and performance..."
        
        if [ -f "public/build/manifest.json" ]; then
          echo "üìä Bundle Analysis:"
          
          # JavaScript files analysis
          JS_FILES=$(find public/build -name "*.js" -type f)
          if [ -n "$JS_FILES" ]; then
            echo "JavaScript files:"
            echo "$JS_FILES" | while read file; do
              size=$(ls -lh "$file" | awk '{print $5}')
              echo "  $size - $(basename "$file")"
            done
            
            # Check for large JS bundles (>500KB)
            LARGE_JS=$(find public/build -name "*.js" -size +500k)
            if [ -n "$LARGE_JS" ]; then
              echo "‚ö†Ô∏è Large JavaScript bundles detected (>500KB):"
              echo "$LARGE_JS"
            fi
          fi
          
          # CSS files analysis
          CSS_FILES=$(find public/build -name "*.css" -type f)
          if [ -n "$CSS_FILES" ]; then
            echo "CSS files:"
            echo "$CSS_FILES" | while read file; do
              size=$(ls -lh "$file" | awk '{print $5}')
              echo "  $size - $(basename "$file")"
            done
            
            # Check for large CSS bundles (>200KB)
            LARGE_CSS=$(find public/build -name "*.css" -size +200k)
            if [ -n "$LARGE_CSS" ]; then
              echo "‚ö†Ô∏è Large CSS bundles detected (>200KB):"
              echo "$LARGE_CSS"
            fi
          fi
          
          # Total bundle size
          TOTAL_SIZE=$(du -sh public/build | awk '{print $1}')
          echo "üìä Total bundle size: $TOTAL_SIZE"
          
        else
          echo "‚ùå Build manifest not found"
          exit 1
        fi
        
    - name: Performance Metrics Collection
      run: |
        echo "üìà Collecting performance metrics..."
        
        # Build time tracking (approximate from logs)
        echo "‚è±Ô∏è Build completed at $(date)"
        
        # Asset optimization check
        if [ -d "public/build" ]; then
          # Check for uncompressed assets
          UNCOMPRESSED=$(find public/build -name "*.js" -o -name "*.css" | xargs file | grep -v "gzip\|compressed" | wc -l)
          echo "üìä Uncompressed assets: $UNCOMPRESSED"
          
          # Check for source maps in production build
          SOURCEMAPS=$(find public/build -name "*.map" | wc -l)
          if [ "$SOURCEMAPS" -gt 0 ]; then
            echo "‚ö†Ô∏è Source maps found in build: $SOURCEMAPS (consider removing for production)"
          fi
        fi
        
        echo "‚úÖ Performance metrics collected"
        
  php-tests:
    name: PHP Tests
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP with optimized configuration
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug
        ini-values: memory_limit=2G, max_execution_time=300, opcache.enable=1, opcache.enable_cli=1
        tools: composer:v2
        
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.composer/cache
          vendor
        key: composer-${{ runner.os }}-${{ hashFiles('composer.lock') }}
        restore-keys: |
          composer-${{ runner.os }}-
          
    - name: Install PHP dependencies
      run: |
        composer install --prefer-dist --no-interaction --optimize-autoloader --classmap-authoritative
        
    - name: Create optimized test environment
      run: |
        cp .env.example .env
        php artisan key:generate
        touch database/testing.sqlite
        
    - name: Run PHP Tests with parallel execution
      run: |
        echo "üß™ Running PHP tests with parallel execution..."
        php artisan test --coverage --min=${{ env.MINIMUM_PHP_COVERAGE }} --coverage-clover=coverage-php.xml --parallel --processes=4
        echo "‚úÖ PHP tests completed"
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/testing.sqlite
        
    - name: Upload PHP test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: php-test-results-${{ github.run_number }}
        path: |
          coverage-php.xml
          storage/logs/
        retention-days: 7

  javascript-tests:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js with enhanced caching
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Cache Vite build cache
      uses: actions/cache@v3
      with:
        path: |
          node_modules/.vite
          .vite
        key: vite-cache-${{ runner.os }}-${{ hashFiles('vite.config.js', 'package-lock.json') }}
        restore-keys: |
          vite-cache-${{ runner.os }}-
          
    - name: Install Node.js dependencies
      run: npm ci --prefer-offline --no-audit --progress=false
      
    - name: Run JavaScript Tests with parallel execution
      run: |
        echo "üß™ Running JavaScript tests with parallel execution..."
        npm run test -- --coverage --reporter=verbose --run --threads
        echo "‚úÖ JavaScript tests completed"
        
    - name: Upload JavaScript test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: js-test-results-${{ github.run_number }}
        path: |
          coverage/
        retention-days: 7

  build-optimization:
    name: Optimized Build Process
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js with enhanced caching
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Cache Vite build cache
      uses: actions/cache@v3
      with:
        path: |
          node_modules/.vite
          .vite
        key: vite-cache-${{ runner.os }}-${{ hashFiles('vite.config.js', 'package-lock.json') }}
        restore-keys: |
          vite-cache-${{ runner.os }}-
          
    - name: Cache build output
      uses: actions/cache@v3
      with:
        path: |
          public/build
        key: build-output-${{ runner.os }}-${{ hashFiles('resources/**/*', 'vite.config.js') }}
        restore-keys: |
          build-output-${{ runner.os }}-
          
    - name: Install Node.js dependencies
      run: npm ci --prefer-offline --no-audit --progress=false
      
    - name: Optimize build resources
      uses: ./.github/actions/resource-optimizer
      with:
        operation: 'optimize-build'
        environment: 'ci'
        enable-aws-recommendations: 'false'
        optimize-caches: 'false'
        monitor-database: 'false'
        
    - name: Build with performance monitoring
      run: |
        echo "üì¶ Starting optimized build process..."
        
        # Record build start time
        BUILD_START=$(date +%s)
        
        # Build with optimizations
        npm run build
        
        # Record build end time and calculate duration
        BUILD_END=$(date +%s)
        BUILD_DURATION=$((BUILD_END - BUILD_START))
        echo "BUILD_DURATION=${BUILD_DURATION}s" >> $GITHUB_ENV
        
        echo "‚úÖ Build completed in ${BUILD_DURATION} seconds"
        
    - name: Analyze build performance
      run: |
        echo "üìä Analyzing build performance..."
        
        if [ -d "public/build" ]; then
          # Calculate total build size
          BUILD_SIZE=$(du -sb public/build | cut -f1)
          BUILD_SIZE_MB=$((BUILD_SIZE / 1024 / 1024))
          echo "BUILD_SIZE_MB=${BUILD_SIZE_MB}" >> $GITHUB_ENV
          
          # Count build files
          BUILD_FILES=$(find public/build -type f | wc -l)
          echo "BUILD_FILES=${BUILD_FILES}" >> $GITHUB_ENV
          
          # Analyze JavaScript bundles
          JS_FILES=$(find public/build -name "*.js" -type f)
          if [ -n "$JS_FILES" ]; then
            echo "JavaScript bundles:"
            echo "$JS_FILES" | while read file; do
              size=$(ls -lh "$file" | awk '{print $5}')
              echo "  $size - $(basename "$file")"
            done
          fi
          
          # Analyze CSS bundles
          CSS_FILES=$(find public/build -name "*.css" -type f)
          if [ -n "$CSS_FILES" ]; then
            echo "CSS bundles:"
            echo "$CSS_FILES" | while read file; do
              size=$(ls -lh "$file" | awk '{print $5}')
              echo "  $size - $(basename "$file")"
            done
          fi
          
          echo "üìä Build metrics: ${BUILD_SIZE_MB}MB, ${BUILD_FILES} files, ${BUILD_DURATION}s"
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ github.run_number }}
        path: |
          public/build/
        retention-days: 7

  quality-gate-validation:
    name: Quality Gate Validation
    runs-on: ubuntu-latest
    needs: [code-quality, php-tests, javascript-tests, build-optimization]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts for validation
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ github.run_number }}
        path: public/build/
        
    - name: Quality Gate Summary with Performance Metrics
      run: |
        echo "üéØ Quality Gate Validation Summary"
        echo "=================================="
        echo "‚úÖ Security scanning completed"
        echo "‚úÖ Code quality checks passed"
        echo "‚úÖ PHP tests passed with parallel execution"
        echo "‚úÖ JavaScript tests passed with parallel execution"
        echo "‚úÖ Optimized build completed"
        echo ""
        
        # Performance metrics summary
        if [ -d "public/build" ]; then
          BUILD_SIZE=$(du -sb public/build | cut -f1)
          BUILD_SIZE_MB=$((BUILD_SIZE / 1024 / 1024))
          BUILD_FILES=$(find public/build -type f | wc -l)
          
          echo "üìä Performance Metrics:"
          echo "   Build size: ${BUILD_SIZE_MB}MB"
          echo "   Build files: ${BUILD_FILES}"
          echo "   Build artifacts cached for future runs"
          
          # Performance thresholds
          if [ "$BUILD_SIZE_MB" -gt 10 ]; then
            echo "‚ö†Ô∏è Build size exceeds 10MB - consider optimization"
          fi
          
          if [ "$BUILD_FILES" -gt 50 ]; then
            echo "‚ö†Ô∏è High number of build files - consider bundling optimization"
          fi
        fi
        
        echo ""
        echo "üöÄ Ready for deployment pipeline"
        
    - name: Notify CI success
      if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'deployment-success'
        environment: 'ci-pipeline'
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        duration: 'CI Pipeline'
        tests-passed: 'All'
      continue-on-error: true
      
    - name: Notify CI failure
      if: failure()
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'test-failure'
        environment: 'ci-pipeline'
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        error-message: 'CI pipeline failed during quality gate validation'
        failed-stage: 'Quality Gate Validation'
      continue-on-error: true

  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, quality-gate-validation]
    if: github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        composer install --no-dev --optimize-autoloader
        npm ci --production=false
        
    - name: Build production assets
      run: npm run build
      
    - name: Verify production build
      run: |
        # Ensure all critical files exist
        test -f public/build/manifest.json || exit 1
        test -d public/build || exit 1
        
        # Check for common production issues
        if grep -r "console.log\|debugger" public/build/*.js 2>/dev/null; then
          echo "‚ùå Debug statements found in production build"
          exit 1
        fi
        
        echo "‚úÖ Production build verification passed"
        
    - name: Cache optimization check
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        
        # Verify caches were created
        test -f bootstrap/cache/config.php || exit 1
        test -f bootstrap/cache/routes-v7.php || exit 1
        
        echo "‚úÖ Cache optimization verified"