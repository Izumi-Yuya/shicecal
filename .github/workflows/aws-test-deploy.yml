name: Deploy to AWS Test Environment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-quality-gate:
    name: Test Environment Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-interaction --optimize-autoloader
      
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Create test environment
      run: |
        cp .env.example .env
        php artisan key:generate
        touch database/testing.sqlite
        
    - name: Run PHP linting
      run: vendor/bin/pint --test
      
    - name: Run JavaScript linting
      run: npm run lint:js
      
    - name: Run Blade template linting
      run: npm run lint:blade
      
    - name: Build test assets
      run: npm run build
      
    - name: Verify build output
      run: |
        if [ ! -d "public/build" ] || [ ! -f "public/build/manifest.json" ]; then
          echo "‚ùå Build verification failed"
          exit 1
        fi
        echo "‚úÖ Build verification passed"
        
    - name: Run PHP tests with coverage
      run: php artisan test --coverage --min=75
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/testing.sqlite
        
    - name: Run JavaScript tests
      run: npm run test
      
    - name: Security audit - PHP dependencies
      run: composer audit
      continue-on-error: true
      
    - name: Security audit - Node.js dependencies
      run: npm audit --audit-level=moderate
      continue-on-error: true

  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: test-quality-gate
    environment: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Notify deployment start
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'deployment-start'
        environment: 'test'
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true
      
    - name: Optimize resources for test deployment
      uses: ./.github/actions/resource-optimizer
      with:
        operation: 'full'
        environment: 'test'
        enable-aws-recommendations: 'false'  # Skip AWS recommendations for test
        optimize-caches: 'true'
        monitor-database: 'true'
        
    - name: Start performance monitoring
      uses: ./.github/actions/performance-monitor
      with:
        operation: 'start'
        environment: 'test'
        enable-alerts: 'true'
        
    - name: Deploy to AWS Test Server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_TEST_HOST }}
        username: ${{ secrets.AWS_TEST_USERNAME }}
        key: ${{ secrets.AWS_TEST_PRIVATE_KEY }}
        script: |
          set -e
          
          echo "üîÑ Starting test environment deployment..."
          
          # Navigate to application directory
          cd /home/ec2-user/shicecal-test
          
          # Create backup of current deployment
          BACKUP_DIR="/home/ec2-user/backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          # Backup current application state
          if [ -d "public/build" ]; then
            cp -r public/build "$BACKUP_DIR/"
            echo "‚úÖ Backed up build assets"
          fi
          
          if [ -f ".env" ]; then
            cp .env "$BACKUP_DIR/"
            echo "‚úÖ Backed up environment configuration"
          fi
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/main
          echo "‚úÖ Updated to latest main branch"
          
          # Install dependencies
          composer install --no-dev --optimize-autoloader
          npm ci --production=false
          echo "‚úÖ Dependencies installed"
          
          # Clear existing build artifacts
          rm -rf public/build
          
          # Build assets
          npm run build
          echo "‚úÖ Assets built"
          
          # Verify build output
          if [ ! -d "public/build" ] || [ ! -f "public/build/manifest.json" ]; then
            echo "‚ùå Build verification failed"
            exit 1
          fi
          
          # Run database migrations
          php artisan migrate --force
          echo "‚úÖ Database migrations completed"
          
          # Seed test data
          php artisan db:seed --class=AdminUserSeeder --force
          php artisan db:seed --class=FacilitySeeder --force
          php artisan db:seed --class=LandInfoSeeder --force
          echo "‚úÖ Test data seeded"
          
          # Clear and rebuild caches
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          php artisan cache:clear
          
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          echo "‚úÖ Caches optimized"
          
          # Restart services
          sudo systemctl restart nginx
          sudo systemctl restart php-fpm
          echo "‚úÖ Services restarted"
          
          echo "üéâ Test deployment completed successfully"

  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: deploy-test
    
    steps:
    - name: Wait for services to start
      run: sleep 30
      
    - name: Health check - HTTP response
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.AWS_TEST_URL }}/health || echo "000")
        if [ "$response" != "200" ]; then
          echo "‚ùå Health check failed - HTTP $response"
          exit 1
        fi
        echo "‚úÖ HTTP health check passed"
        
    - name: Health check - Application status
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_TEST_HOST }}
        username: ${{ secrets.AWS_TEST_USERNAME }}
        key: ${{ secrets.AWS_TEST_PRIVATE_KEY }}
        script: |
          cd /home/ec2-user/shicecal-test
          
          # Check database connection
          if ! php artisan tinker --execute="DB::connection()->getPdo(); echo 'DB OK';" 2>/dev/null | grep -q "DB OK"; then
            echo "‚ùå Database connection failed"
            exit 1
          fi
          echo "‚úÖ Database connection verified"
          
          # Check if Vite manifest exists and is valid
          if [ ! -f "public/build/manifest.json" ]; then
            echo "‚ùå Vite manifest missing"
            exit 1
          fi
          
          if ! php -r "json_decode(file_get_contents('public/build/manifest.json')); if (json_last_error() !== JSON_ERROR_NONE) exit(1);"; then
            echo "‚ùå Vite manifest invalid"
            exit 1
          fi
          echo "‚úÖ Asset manifest verified"
          
          # Check Laravel application status
          if ! php artisan about --only=environment 2>/dev/null | grep -q "Environment"; then
            echo "‚ùå Laravel application check failed"
            exit 1
          fi
          echo "‚úÖ Laravel application status verified"
          
    - name: Notify deployment success
      if: success()
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'deployment-success'
        environment: 'test'
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        duration: 'Test deployment completed'
        tests-passed: 'All health checks passed'
      continue-on-error: true
      
    - name: Notify deployment failure
      if: failure()
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'deployment-failure'
        environment: 'test'
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        error-message: 'Test deployment failed during health check'
        failed-stage: 'Health Check'
      continue-on-error: true

  rollback-on-failure:
    name: Rollback on Health Check Failure
    runs-on: ubuntu-latest
    needs: [deploy-test, health-check]
    if: failure()
    
    steps:
    - name: Rollback deployment
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_TEST_HOST }}
        username: ${{ secrets.AWS_TEST_USERNAME }}
        key: ${{ secrets.AWS_TEST_PRIVATE_KEY }}
        script: |
          echo "üîÑ Starting rollback process..."
          
          cd /home/ec2-user/shicecal-test
          
          # Find latest backup
          LATEST_BACKUP=$(ls -t /home/ec2-user/backups/ | head -n1)
          
          if [ -n "$LATEST_BACKUP" ] && [ -d "/home/ec2-user/backups/$LATEST_BACKUP" ]; then
            echo "üì¶ Restoring from backup: $LATEST_BACKUP"
            
            # Restore build assets
            if [ -d "/home/ec2-user/backups/$LATEST_BACKUP/build" ]; then
              rm -rf public/build
              cp -r "/home/ec2-user/backups/$LATEST_BACKUP/build" public/
              echo "‚úÖ Build assets restored"
            fi
            
            # Restore environment configuration
            if [ -f "/home/ec2-user/backups/$LATEST_BACKUP/.env" ]; then
              cp "/home/ec2-user/backups/$LATEST_BACKUP/.env" .
              echo "‚úÖ Environment configuration restored"
            fi
            
            # Clear caches and restart services
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear
            php artisan cache:clear
            
            sudo systemctl restart nginx
            sudo systemctl restart php-fpm
            
            echo "‚úÖ Rollback completed successfully"
          else
            echo "‚ùå No backup found for rollback"
            exit 1
          fi
          
    - name: Notify rollback started
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'rollback-started'
        environment: 'test'
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        error-message: 'Health check failure'
      continue-on-error: true
      
    - name: Send rollback email notification
      uses: ./.github/actions/email-notify
      with:
        notification-type: 'rollback-started'
        environment: 'test'
        smtp-username: ${{ secrets.SMTP_USERNAME }}
        smtp-password: ${{ secrets.SMTP_PASSWORD }}
        to-email: ${{ secrets.DEVOPS_EMAIL }}
        error-message: 'Test deployment health check failure - automatic rollback initiated'
      continue-on-error: true
      
    - name: Notify rollback completion
      if: success()
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'rollback-success'
        environment: 'test'
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true
      
    - name: Send rollback completion email
      if: success()
      uses: ./.github/actions/email-notify
      with:
        notification-type: 'rollback-completed'
        environment: 'test'
        smtp-username: ${{ secrets.SMTP_USERNAME }}
        smtp-password: ${{ secrets.SMTP_PASSWORD }}
        to-email: ${{ secrets.DEVOPS_EMAIL }}
        error-message: 'Test deployment rollback completed successfully'
      continue-on-error: true
      
  performance-monitoring:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [deploy-test, health-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Complete performance monitoring
      id: performance-analysis
      uses: ./.github/actions/performance-monitor
      with:
        operation: 'full'
        environment: 'test'
        enable-alerts: 'true'
        slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Performance summary
      run: |
        echo "üìä Test Deployment Performance Summary"
        echo "======================================"
        echo "Performance Score: ${{ steps.performance-analysis.outputs.performance-score }}/100"
        echo "Deployment Duration: ${{ steps.performance-analysis.outputs.deployment-duration }}s"
        echo "Build Size: ${{ steps.performance-analysis.outputs.build-size }} bytes"
        echo "Alerts Generated: ${{ steps.performance-analysis.outputs.alerts-count }}"
        
        # Set performance status for badge/status
        SCORE="${{ steps.performance-analysis.outputs.performance-score }}"
        if [ "$SCORE" -ge 90 ]; then
          echo "PERFORMANCE_STATUS=excellent" >> $GITHUB_ENV
        elif [ "$SCORE" -ge 75 ]; then
          echo "PERFORMANCE_STATUS=good" >> $GITHUB_ENV
        elif [ "$SCORE" -ge 60 ]; then
          echo "PERFORMANCE_STATUS=average" >> $GITHUB_ENV
        else
          echo "PERFORMANCE_STATUS=poor" >> $GITHUB_ENV
        fi
        
    - name: Upload performance artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-performance-report-${{ github.run_number }}
        path: |
          .github/artifacts/performance/
          .github/artifacts/optimization/
          .github/logs/deployment-performance-report.md
          .github/logs/performance-insights.md
          .github/logs/resource-optimization-report.md
        retention-days: 14
        
    - name: Notify performance results
      if: steps.performance-analysis.outputs.performance-score < 75
      uses: ./.github/actions/slack-notify
      with:
        notification-type: 'performance-alert'
        environment: 'test'
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        performance-score: ${{ steps.performance-analysis.outputs.performance-score }}
        alerts-count: ${{ steps.performance-analysis.outputs.alerts-count }}
      continue-on-error: true