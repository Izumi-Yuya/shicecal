<?php

namespace App\Services;

use App\Models\Facility;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\View;
use Elibyy\TCPDF\Facades\TCPDF;

class SecurePdfService
{
    /**
     * Generate secure PDF for a facility
     */
    public function generateSecureFacilityPdf(Facility $facility, array $options = []): string
    {
        $data = [
            'facility' => $facility,
            'generated_at' => now(),
            'generated_by' => Auth::user(),
        ];

        // Create new PDF document
        $pdf = new \TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

        // Set document information
        $pdf->SetCreator('Shise-Cal System');
        $pdf->SetAuthor('Shise-Cal System');
        $pdf->SetTitle('施設情報帳票 - ' . $facility->facility_name);
        $pdf->SetSubject('Facility Information Report');
        $pdf->SetKeywords('facility, report, shise-cal');

        // Set security settings
        $this->setSecuritySettings($pdf, $options);

        // Set default header data
        $pdf->SetHeaderData('', 0, '施設情報帳票', 'Facility Information Report - Generated by Shise-Cal System');

        // Set header and footer fonts
        $pdf->setHeaderFont(['dejavusans', '', 10]);
        $pdf->setFooterFont(['dejavusans', '', 8]);

        // Set default monospaced font
        $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

        // Set margins
        $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
        $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
        $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

        // Set auto page breaks
        $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

        // Set image scale factor
        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

        // Add a page
        $pdf->AddPage();

        // Generate HTML content
        $html = $this->generateHtmlContent($data);

        // Print text using writeHTMLCell()
        $pdf->writeHTML($html, true, false, true, false, '');

        // Add watermark for approved documents
        if ($facility->status === 'approved') {
            $this->addWatermark($pdf, '承認済');
        }

        // Return PDF as string
        return $pdf->Output('', 'S');
    }

    /**
     * Set security settings for PDF
     */
    private function setSecuritySettings(\TCPDF $pdf, array $options = []): void
    {
        // Generate a secure password if not provided
        $userPassword = $options['user_password'] ?? $this->generateSecurePassword();
        $ownerPassword = $options['owner_password'] ?? $this->generateSecurePassword(16);

        // Set permissions (restrict editing, copying, printing)
        $permissions = [
            'print' => $options['allow_print'] ?? false,
            'modify' => false, // Always disable modification
            'copy' => false,   // Always disable copying
            'annot-forms' => false, // Disable annotations and forms
            'fill-forms' => false,  // Disable form filling
            'extract' => false,     // Disable content extraction
            'assemble' => false,    // Disable document assembly
            'print-high' => false   // Disable high-quality printing
        ];

        // Set protection with passwords and permissions
        $pdf->SetProtection($permissions, $userPassword, $ownerPassword, 0, null);

        // Add metadata to track document authenticity (using standard PDF metadata methods)
        $pdf->SetCreator('Shise-Cal System v1.0');
        $pdf->SetAuthor(Auth::user()->email);
        $pdf->SetTitle('Secure Facility Report - ' . now()->toISOString());
        $pdf->SetSubject('Protected Facility Information');
        $pdf->SetKeywords('facility,report,secure,protected,shise-cal');
    }

    /**
     * Generate HTML content for the PDF
     */
    private function generateHtmlContent(array $data): string
    {
        return View::make('export.pdf.secure-facility-report', $data)->render();
    }

    /**
     * Add watermark to PDF
     */
    private function addWatermark(\TCPDF $pdf, string $text): void
    {
        // Get current page dimensions
        $pageWidth = $pdf->getPageWidth();
        $pageHeight = $pdf->getPageHeight();

        // Set watermark properties
        $pdf->SetAlpha(0.1); // Set transparency
        $pdf->SetFont('dejavusans', 'B', 48);
        $pdf->SetTextColor(128, 128, 128);

        // Calculate position for centered rotated text
        $x = $pageWidth / 2;
        $y = $pageHeight / 2;

        // Start transformation
        $pdf->StartTransform();

        // Rotate text 45 degrees
        $pdf->Rotate(45, $x, $y);

        // Add watermark text
        $pdf->Text($x - 30, $y, $text);

        // Stop transformation
        $pdf->StopTransform();

        // Reset alpha and color
        $pdf->SetAlpha(1);
        $pdf->SetTextColor(0, 0, 0);
    }

    /**
     * Generate secure password
     */
    private function generateSecurePassword(int $length = 12): string
    {
        $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
        $password = '';
        
        for ($i = 0; $i < $length; $i++) {
            $password .= $characters[random_int(0, strlen($characters) - 1)];
        }
        
        return $password;
    }

    /**
     * Generate filename with security hash
     */
    public function generateSecureFilename(Facility $facility): string
    {
        $safeFilename = preg_replace('/[^a-zA-Z0-9\-_]/', '_', $facility->facility_name);
        $hash = substr(hash('sha256', $facility->id . $facility->updated_at . Auth::id()), 0, 8);
        
        return "secure_facility_report_{$facility->office_code}_{$safeFilename}_{$hash}_" . now()->format('Y-m-d') . '.pdf';
    }

    /**
     * Get PDF metadata for verification
     */
    public function getPdfMetadata(Facility $facility): array
    {
        return [
            'document_type' => 'Facility Report',
            'facility_id' => $facility->id,
            'facility_name' => $facility->facility_name,
            'office_code' => $facility->office_code,
            'generated_at' => now()->toISOString(),
            'generated_by' => Auth::user()->email,
            'security_level' => 'Protected',
            'approval_status' => $facility->status,
            'approved_at' => $facility->approved_at?->toISOString(),
            'checksum' => hash('sha256', serialize([
                $facility->id,
                $facility->updated_at,
                Auth::id(),
                now()->format('Y-m-d')
            ]))
        ];
    }
}