#!/bin/bash

# Shise-Cal уГЗуГЧуГнуВдуГбуГ│уГИшинхоЪуГХуВбуВдуГл
# уБУуБоуГХуВбуВдуГлуВТч╖ищЫЖуБЧуБжчТ░хвГхЫ║цЬЙуБошинхоЪуВТшбМуБгуБжуБПуБауБХуБД

# AWS EC2шинхоЪ
export AWS_HOST="${AWS_HOST:-35.75.1.64}"
export AWS_USERNAME="${AWS_USERNAME:-ec2-user}"
export AWS_PROD_URL="${AWS_PROD_URL:-http://35.75.1.64}"

# SSHшинхоЪ
export SSH_KEY_PATH="${SSH_KEY_PATH:-$HOME/Shise-Cal-test-key.pem}"

# GitHubшинхоЪ
export GITHUB_REPO="${GITHUB_REPO:-Izumi-Yuya/shicecal}"

# уГЗуГЧуГнуВдуГбуГ│уГИшинхоЪ
export DEPLOY_DIR="${DEPLOY_DIR:-/home/ec2-user/shicecal}"
export REMOTE_BACKUP_DIR="${REMOTE_BACKUP_DIR:-/home/ec2-user/backups}"
export LOCAL_BACKUP_DIR="${LOCAL_BACKUP_DIR:-./backups}"

# чЫгшжЦшинхоЪ
export MONITORING_DIR="${MONITORING_DIR:-/home/ec2-user/monitoring}"

# щАЪчЯешинхоЪя╝ИуВкуГЧуВ╖уГзуГ│я╝Й
export SLACK_WEBHOOK_URL="${SLACK_WEBHOOK_URL:-}"
export NOTIFICATION_EMAIL="${NOTIFICATION_EMAIL:-}"

# шинхоЪхАдуБошбичд║щЦвцХ░
show_config() {
    echo "ЁЯФз чП╛хЬиуБошинхоЪ:"
    echo "================================"
    echo "AWS Host: $AWS_HOST"
    echo "AWS Username: $AWS_USERNAME"
    echo "AWS Prod URL: $AWS_PROD_URL"
    echo "SSH Key Path: $SSH_KEY_PATH"
    echo "GitHub Repo: $GITHUB_REPO"
    echo "Deploy Dir: $DEPLOY_DIR"
    echo "Remote Backup Dir: $REMOTE_BACKUP_DIR"
    echo "Local Backup Dir: $LOCAL_BACKUP_DIR"
    echo "================================"
}

# шинхоЪхАдуБоцдЬши╝щЦвцХ░
validate_config() {
    local errors=0
    
    # SSHщН╡уГХуВбуВдуГлуБохнШхЬичв║шкН
    if [ ! -f "$SSH_KEY_PATH" ]; then
        echo "тЭМ SSHщН╡уГХуВбуВдуГлуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ: $SSH_KEY_PATH"
        errors=$((errors + 1))
    else
        # SSHщН╡уБоцийщЩРчв║шкН
        local perms=$(stat -f "%A" "$SSH_KEY_PATH" 2>/dev/null || stat -c "%a" "$SSH_KEY_PATH" 2>/dev/null)
        if [ "$perms" != "600" ]; then
            echo "тЪая╕П SSHщН╡уБоцийщЩРуВТф┐оцнгуБЧуБ╛уБЩ: chmod 600 $SSH_KEY_PATH"
            chmod 600 "$SSH_KEY_PATH"
        fi
    fi
    
    # AWSцОеч╢ЪуГЖуВ╣уГИ
    if command -v ssh >/dev/null 2>&1; then
        if ! ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no -o ConnectTimeout=5 "$AWS_USERNAME@$AWS_HOST" "echo 'Connection test'" >/dev/null 2>&1; then
            echo "тЪая╕П AWS EC2уБ╕уБоцОеч╢ЪуГЖуВ╣уГИуБлхд▒цХЧуБЧуБ╛уБЧуБЯ"
            echo "   Host: $AWS_HOST"
            echo "   User: $AWS_USERNAME"
            echo "   Key: $SSH_KEY_PATH"
        else
            echo "тЬЕ AWS EC2цОеч╢ЪуГЖуВ╣уГИцИРхКЯ"
        fi
    fi
    
    return $errors
}

# уБУуБоуВ╣уВпуГкуГЧуГИуБМчЫ┤цОехоЯшбМуБХуВМуБЯха┤хРИ
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    case "${1:-show}" in
        show)
            show_config
            ;;
        validate)
            show_config
            echo ""
            validate_config
            ;;
        test)
            echo "ЁЯзк шинхоЪуГЖуВ╣уГИхоЯшбМф╕н..."
            validate_config
            if [ $? -eq 0 ]; then
                echo "тЬЕ шинхоЪуГЖуВ╣уГИхоМф║Ж"
            else
                echo "тЭМ шинхоЪуБлхХПщбМуБМуБВуВКуБ╛уБЩ"
                exit 1
            fi
            ;;
        *)
            echo "ф╜┐чФицЦ╣ц│Х: $0 [show|validate|test]"
            echo "  show     - чП╛хЬиуБошинхоЪуВТшбичд║"
            echo "  validate - шинхоЪуВТцдЬши╝"
            echo "  test     - шинхоЪуГЖуВ╣уГИуВТхоЯшбМ"
            ;;
    esac
fi